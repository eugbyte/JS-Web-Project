/*CSS GRID*/
.container {
    display: grid;
    position: relative;
    margin: auto;
    grid-gap: 10px;
    grid-template-areas: 
                    "topnav topnav"
                    "carousel carousel"
                    "left right"
                    "form form"
                    "footer footer";
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 0.4fr 1fr 1fr 1fr 1fr;    /*HOW TO GET RID OF THE EXTRA SPACE BETWEEN THE NAVBAR AND THE GRID? Tried setting it to max-content and auto to set the height of .topnav to be equal to its content, but it does not work -- end up overlapping*/
    justify-content: center;
    }

.topnav {
  background-color: beige;
  grid-area: topnav;
}

.carousel {
    background-color: cornflowerblue;
    grid-area: carousel;
}

.left {
  background-color: cornflowerblue;
	grid-area: left;
}

.right {
  background-color: beige;
  grid-area: right;
}

.intercom {
  background-color: cornflowerblue;
  grid-area: form;
}

footer {
  background-color: beige;
  grid-area: footer;
  position: relative;
  padding: 5px 5px;
}

@media only screen and (max-width: 600px) {
  .container {
    grid-template-areas: 
                        "topnav"
                        "carousel"
                        "left"  /*.left will be placed on top of .right*/
                        "right"
                        "form"
                        "footer";
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 1fr 1fr 1fr 1fr auto; 
  }
}
/*When grid-template-rows is set to auto, the size of the rows is determined by the size of the container, and on the size of the content of the items in the row the */
/*NAVIGATION BAR*/

    body {
      margin: 0;
      font-family: Arial
    }

    .topnav {
      overflow: hidden;
      /*The overflow property specifies what should happen if content overflows an element's box -- if set to hidden the overflow elements are hidden. WILL THE OVERFLOW PROPERTY AFFECT THE DROPDOWN MENU?--YES. SO HOW DID WC3 MAKE THEIR DROPDOWN MENU WORK EVEN WITH overflow: hidden?*/
      background-color: #333;
      /*to add the background-color to <ul> instead of each <a> element so that you can have a full-width background color strecthing the entire width of the page*/
    }

    .topnav ul {
      list-style-type: none;
      margin: 0;
      padding: 0;
      position: fixed;
      /*this is the problematic line -- this is what makes the responsiveness of the navbar buggy. the fixed element is removed from the document flow and ignores the elements below, overlapping them when you expand the navbar.  When changed to position relative, the navbar works*/
      /*When we apply position:fixed to an element, it's taken out of the normal flow of the document, therefore it doesn't respect it's parent's element width. Therefore, must override it by specifying the width as 100% of the parent element, i.e. the document itself*/
      width: 100%;
      top: 0;
      /*If position: absolute; or position: fixed; - the top property sets the top edge of an element to a unit above/below the top edge of its nearest positioned ancestor.If position: static; - the top property has no effect.*/
    }

    .topnav a {
      float: left;
      /*because the links <a> are set as block elements, but we still want to make them in a single line, we can use the float property to to get block elements to slide next to each other*/
      display: block;
      /*Displaying the links as block elements makes the whole link area clickable (not just the text), and it allows us to specify padding (and height, width, margins, etc. if you want)*/
      color: #f2f2f2;
      text-align: center;
      padding: 14px 16px;
      /*specify some padding to space out the links <a>. Otherwise, as block elements that are being floated, they will appear right next to one another*/
      /*top bottom is 14px, left right is 16px*/
      text-decoration: none;
      /*to remove the underline thats is the default style for links <a>*/
      font-size: 17px;
    }

    /*.topnav li {
      float: left;  
    /*When you float li to the left, the responsiveness function cannot work. Why?
    }*/

    /*To let the user know which navigation link he is at*/

    .active {
      background-color: #FF9933;
      color: white;
    }

    .topnav .icon {
      display: none;
    }

    /*dropdown navbar*/

    .dropdown {
      float: left;
      overflow: hidden;
    }

    .dropdown .dropbtn {
      font-size: 17px;
      border: none;
      outline: none;
      color: white;
      padding: 14px 16px;
      background-color: inherit;
      font-family: inherit;
      margin: 0;
    }

    .dropdown-content {
      display: none;
      position: absolute;
      /*if relative, it will just go with the normal flow of the page, and expand the height of the navbar. Position absolute means that (i) the target element is positioned relative to the nearest positioned ancestor, and (ii) it ignores the normal flow of the page*/
      background-color: #f9f9f9;
      /*otherwise, the links will have no background color. Why does it not inherit the css property of <ul>?*/
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
      z-index: 1;
      /*so that the dropdown menu is stacked in front of the element directly below which it happens to overlap with*/
    }

    .dropdown-content a {
      float: none;
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      /*to display the dropdown links upon hover. Displayed as block rather than inline for vertical menu. Also to make the entire area surrounding <a> clickable*/
      /*why is the dropdown content not affect by the overflow: hidden property of the parent container? Because of the specificity?*/
      text-align: left;
    }

    /*upon hovering over each <a>link on .topnav, the .dropdown button and  the toggle .dropbtn, change the background color as follow*/

    .topnav a:hover,
    .dropdown:hover .dropbtn {
      background-color: #555;
    }

    /*previous hover targets the dropdown button, this here targets the <a> links within the dropdown button*/

    .dropdown-content a:hover {
      background-color: #ddd;
      color: black;
    }

    .dropdown:hover .dropdown-content {
      display: block;
    }

    @media screen and (max-width: 600px) {
      .topnav a:not(.active), .dropdown .dropbtn {
        display: none;
      /*The :not(selector) selector matches every element that is NOT the specified element/selector.*/
      /*The :first-child CSS pseudo-class represents the first element among a group of sibling elements. Does not work here, WHY? CANNOT USE FIRST-CHILD BECAUSE FIRST CHILD REFERS TO <li>*/
      /*Therefore, the overall effect is that when the screen is less than 600 pixels wide, hide all the links <a> of .topnav class, except for the first one ("Home").*/
      /*cannot use first-child because first-child is <li>, so use this method*/
      }
      
      .topnav a.icon {
        float: right;
        display: block;
        /*When the screen is less than 600px wide, reveal and display the icon as a block element. Purpose of display: block is to ensure that the icon is by itself and occupy the entire line without competing links*/
        /*WORKS WHEN THE NOT(SELECTOR) IS NOT USED, BUT DOES NOT WORK ONCE THE NOT(SELECTOR) IS IN USE. WHY? SOMETHING TO DO WITH THE <LI> TAGS? The example on wc3 did not use <li> tags*/
      }
    }
    
    
   @media screen and (max-width: 600px) {
     /*The "responsive" class is added to the topnav with JavaScript when the user clicks on the icon. This class makes display the links vertically instead of horizontally) */
      /*From StackOverflow. In class="A B", that's actually two classes in a single attribute. The space is not part of a class name; it acts as the separator.You never include a space when chaining class selectors, not even like this: .A .B*/
      .topnav.responsive {
        position: relative; /*recall concept of absolute child positioned within a relative parent (.topnav. responsive). An absolute child element will ignore its absolute parent and position itself relative to the ducment instead of the parent*/
      }

      .topnav.responsive ul {
        position: relative;
        /*IMPORTANT*/
        /*Change from position fixed to position relative otherwise navbar becomes buggy when expanded - ignores document flow and overlaps*/
      }

      .topnav.responsive .icon {
        position: absolute;
        /*A parent element with relative positioning gives you the control to absolutely position children elements inside of it.*/
        /*In this case, the child button is set to absolute, and the parent .topnav div is set to relative*/
        /*the icon is positioned to the top right of the navbar, i.e. the .topnav div*/
        right: 0;
        top: 0;
      }
      .topnav.responsive a {
        float: none;
        display: block;
        /*otherwise, the <a> elements will collapse into a single line*/
        /*When combiend with float:none -- no elements to float to its left or right, the links appear on top of one another*/
        text-align: center;
      }
      .topnav.responsive .dropdown {
        float: none;
        /*you do not wish for the element to float. So that the links will appear on top of one another*/
      }
      .topnav.responsive .dropdown-content {
        position: relative;
        /*If set to position absolute, then links 2 and link 3 will not show. Because if positioned absolutely, will disrupt the normal flow of the page. The relative positioned element will now appear on top of any other statically positioned element, thereby stretching the parent container instead of disruptign it*/
      }
      .topnav.responsive .dropdown .dropbtn {
        display: block;
        /*works when set to display: initial (default value) too*/
        /*if ommitted, i.e. either display: block or display: initial, the droppdown <a> and its child links will not show at all. WHY? See the CSS code above .dropdown dropbtn{display: none}*/
        width: 100%;
        text-align: center;
      }
    }




/*FOOTER*/
footer > p {
  display: inline;  /*to sit on the same line as the icons*/
  color: blueviolet;
}

.social_icons {
  display: inline-block;  /*to sit on the same line as <p>. Secondly, inline-block respects padding.*/
  float: right;
  
}

.social_icons .fa {
  padding: 5px;  /*to create space between each icon and their respective border, i.e. increase the backgroudn size of the icon*/
  margin-right: 15px;
  margin-bottom: 10px;
  text-align: center; /*to center the icons, e.g. the "f" for facebook is centered within the blue square*/
  text-decoration: none;  /*get rid of the underlines*/
  font-size: 20px;  /*doesnt work when you insert it under .fa instead of .social_icons. WHY?*/
  width: 20px;  /*set it the same as font-size (height) to make a sqaure*/
  border-radius: 50% /*make a circle*/
}

.fa:hover {
    opacity: 0.7;
}

.fa-facebook {
  background: #3B5998;
  color: white;
}

.fa-twitter {
  background: #55ACEE;
  color: white;
}

.fa-linkedin {
  background: #007bb5;
  color: white;
}

.fa.fa-instagram {
  color: white;
  background: radial-gradient(circle at 30% 107%, #fdf497 0%, #fdf497 5%, #fd5949 45%, #d6249f 60%, #285AEB 90%);
  background-clip: text;
}

@media only screen and (max-width: 600px) {
  footer > p {
    display: block;
    text-align: center;
  }
}

/*CREATING A STICKY FOOTER. How to make footer always be positioned at the bottom of the page, but not fixed? */

html {
  height: 100%;
}

/*from StackOverflow: Body/container looks to its parent (HTML) for how to scale the dynamic property, so the HTML element needs to have it's height set as well. html's height is set 100% of the viewport. However the content of body/cotainer will probably need to change dynamically. Setting min-height to 100% will accomplish this goal. .container's height is set to 100% of html, which has been set to 100% of the viewport*/
.container {
  min-height: 100%;
} /*should put in the same description as .container, but for demonstration purpose, single it out here*/

/*END OF STICKY FOOTER*/
